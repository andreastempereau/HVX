# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import helmet_pb2 as helmet__pb2


class VideoServiceStub(object):
    """Service definitions
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetFrame = channel.unary_unary(
                '/helmet.VideoService/GetFrame',
                request_serializer=helmet__pb2.FrameRequest.SerializeToString,
                response_deserializer=helmet__pb2.FrameMeta.FromString,
                )
        self.StreamFrames = channel.unary_stream(
                '/helmet.VideoService/StreamFrames',
                request_serializer=helmet__pb2.FrameRequest.SerializeToString,
                response_deserializer=helmet__pb2.FrameMeta.FromString,
                )


class VideoServiceServicer(object):
    """Service definitions
    """

    def GetFrame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamFrames(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VideoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetFrame': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFrame,
                    request_deserializer=helmet__pb2.FrameRequest.FromString,
                    response_serializer=helmet__pb2.FrameMeta.SerializeToString,
            ),
            'StreamFrames': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamFrames,
                    request_deserializer=helmet__pb2.FrameRequest.FromString,
                    response_serializer=helmet__pb2.FrameMeta.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'helmet.VideoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VideoService(object):
    """Service definitions
    """

    @staticmethod
    def GetFrame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/helmet.VideoService/GetFrame',
            helmet__pb2.FrameRequest.SerializeToString,
            helmet__pb2.FrameMeta.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamFrames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/helmet.VideoService/StreamFrames',
            helmet__pb2.FrameRequest.SerializeToString,
            helmet__pb2.FrameMeta.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class PerceptionServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Infer = channel.unary_unary(
                '/helmet.PerceptionService/Infer',
                request_serializer=helmet__pb2.FrameMeta.SerializeToString,
                response_deserializer=helmet__pb2.DetectionResult.FromString,
                )
        self.InferStream = channel.stream_stream(
                '/helmet.PerceptionService/InferStream',
                request_serializer=helmet__pb2.FrameMeta.SerializeToString,
                response_deserializer=helmet__pb2.DetectionResult.FromString,
                )
        self.SetROI = channel.unary_unary(
                '/helmet.PerceptionService/SetROI',
                request_serializer=helmet__pb2.ROIRequest.SerializeToString,
                response_deserializer=helmet__pb2.CommandResponse.FromString,
                )


class PerceptionServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Infer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InferStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetROI(self, request, context):
        """Region of interest
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PerceptionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Infer': grpc.unary_unary_rpc_method_handler(
                    servicer.Infer,
                    request_deserializer=helmet__pb2.FrameMeta.FromString,
                    response_serializer=helmet__pb2.DetectionResult.SerializeToString,
            ),
            'InferStream': grpc.stream_stream_rpc_method_handler(
                    servicer.InferStream,
                    request_deserializer=helmet__pb2.FrameMeta.FromString,
                    response_serializer=helmet__pb2.DetectionResult.SerializeToString,
            ),
            'SetROI': grpc.unary_unary_rpc_method_handler(
                    servicer.SetROI,
                    request_deserializer=helmet__pb2.ROIRequest.FromString,
                    response_serializer=helmet__pb2.CommandResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'helmet.PerceptionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PerceptionService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Infer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/helmet.PerceptionService/Infer',
            helmet__pb2.FrameMeta.SerializeToString,
            helmet__pb2.DetectionResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InferStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/helmet.PerceptionService/InferStream',
            helmet__pb2.FrameMeta.SerializeToString,
            helmet__pb2.DetectionResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetROI(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/helmet.PerceptionService/SetROI',
            helmet__pb2.ROIRequest.SerializeToString,
            helmet__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class VoiceServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessAudio = channel.stream_stream(
                '/helmet.VoiceService/ProcessAudio',
                request_serializer=helmet__pb2.AudioData.SerializeToString,
                response_deserializer=helmet__pb2.Intent.FromString,
                )
        self.Synthesize = channel.unary_unary(
                '/helmet.VoiceService/Synthesize',
                request_serializer=helmet__pb2.TTSRequest.SerializeToString,
                response_deserializer=helmet__pb2.TTSResponse.FromString,
                )


class VoiceServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ProcessAudio(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Synthesize(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VoiceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProcessAudio': grpc.stream_stream_rpc_method_handler(
                    servicer.ProcessAudio,
                    request_deserializer=helmet__pb2.AudioData.FromString,
                    response_serializer=helmet__pb2.Intent.SerializeToString,
            ),
            'Synthesize': grpc.unary_unary_rpc_method_handler(
                    servicer.Synthesize,
                    request_deserializer=helmet__pb2.TTSRequest.FromString,
                    response_serializer=helmet__pb2.TTSResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'helmet.VoiceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VoiceService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ProcessAudio(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/helmet.VoiceService/ProcessAudio',
            helmet__pb2.AudioData.SerializeToString,
            helmet__pb2.Intent.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Synthesize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/helmet.VoiceService/Synthesize',
            helmet__pb2.TTSRequest.SerializeToString,
            helmet__pb2.TTSResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class OrchestratorServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExecuteCommand = channel.unary_unary(
                '/helmet.OrchestratorService/ExecuteCommand',
                request_serializer=helmet__pb2.Command.SerializeToString,
                response_deserializer=helmet__pb2.CommandResponse.FromString,
                )
        self.GetStatus = channel.unary_unary(
                '/helmet.OrchestratorService/GetStatus',
                request_serializer=helmet__pb2.StatusRequest.SerializeToString,
                response_deserializer=helmet__pb2.HUDStatus.FromString,
                )
        self.StreamStatus = channel.unary_stream(
                '/helmet.OrchestratorService/StreamStatus',
                request_serializer=helmet__pb2.StatusRequest.SerializeToString,
                response_deserializer=helmet__pb2.HUDStatus.FromString,
                )


class OrchestratorServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ExecuteCommand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrchestratorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExecuteCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteCommand,
                    request_deserializer=helmet__pb2.Command.FromString,
                    response_serializer=helmet__pb2.CommandResponse.SerializeToString,
            ),
            'GetStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatus,
                    request_deserializer=helmet__pb2.StatusRequest.FromString,
                    response_serializer=helmet__pb2.HUDStatus.SerializeToString,
            ),
            'StreamStatus': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamStatus,
                    request_deserializer=helmet__pb2.StatusRequest.FromString,
                    response_serializer=helmet__pb2.HUDStatus.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'helmet.OrchestratorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OrchestratorService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ExecuteCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/helmet.OrchestratorService/ExecuteCommand',
            helmet__pb2.Command.SerializeToString,
            helmet__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/helmet.OrchestratorService/GetStatus',
            helmet__pb2.StatusRequest.SerializeToString,
            helmet__pb2.HUDStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/helmet.OrchestratorService/StreamStatus',
            helmet__pb2.StatusRequest.SerializeToString,
            helmet__pb2.HUDStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
